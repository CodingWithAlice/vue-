/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// 当render函数是tenplate经过函数编译生成的
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    // 编译生成的children理论上都已经是VNode了
    // 但是有个例外就是函数式组件返回的是一个数组而不是根结点
    // 所以需要concat方法把children数组打平，保证children数组深度只有一层
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
export function normalizeChildren (children: any): ?Array<VNode> {
  // 如果render函数是用户手写的
  // 当children只有一个节点的时候，使用createTextVNode创建一个文本的VNode
  // 如果编译slot、v-for的时候产生了嵌套数组，调用normalizeArrayChildren方法
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

// 两个参数
// children表示要规范的子节点
// nestedIndex表示嵌套的索引（嵌套的child可能是数组类型）
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  // return结果是res
  const res = []
  let i, c, lastIndex, last
  // 遍历children
  for (i = 0; i < children.length; i++) {
    // 获得单个节点c
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    //  nested
    // 数组类型判断
    // 判断结果有三种情况，每种情况中，如果存在两个连续的text节点，会把它们合并成⼀个text节点
    if (Array.isArray(c)) {
      // 如果单个节点c仍是数组类型，进行递归调用
      if (c.length > 0) {
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 如果存在两个连续的text节点，会把它们合并成⼀个text节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) {
      // 如果是基础类型，通过createTextVNode转换成VNode类型
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 如果存在两个连续的text节点，会把它们合并成⼀个text节点
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } else {
      // 否则，就应该已经是VNode类型了
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        // 如果存在两个连续的text节点，会把它们合并成⼀个text节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 如果 children 是⼀个列表并且列表还存在嵌套的情况，则根据 nestedIndex 去更新它的 key
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
